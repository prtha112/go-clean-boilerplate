version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: go_clean_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: go_clean_db
    ports:
      - "7775:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: go_clean_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka1:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"

  go-clean-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: api
    container_name: go_clean_api
    ports:
      - "8085:8085"
    environment:
      - SERVER_PORT=8085
      - SERVER_HOST=0.0.0.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - KAFKA_BROKERS=kafka1:19092
    depends_on:
      postgres:
        condition: service_healthy
      kafka1:
        condition: service_started
    volumes:
      - .:/app

  go-clean-consumer:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: consumer
    container_name: go_clean_consumer
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - KAFKA_BROKERS=kafka1:19092
      - KAFKA_GROUP_ID=invoice-group
    depends_on:
      postgres:
        condition: service_healthy
      kafka1:
        condition: service_started
    volumes:
      - .:/app

volumes:
  postgres_data: